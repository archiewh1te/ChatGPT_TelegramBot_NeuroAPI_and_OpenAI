from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession

from data.config import load_config
from database.function.user_commands import select_user
from filters import PrivateChatFilter

from aiogram import Router, F

from aiogram.types import Message, CallbackQuery

from keyboards.users.kb_menu_user import kb_back, kb_user_main

config = load_config('.env')

DEV_ID = config.tg_bot.dev_id

router = Router(name='profile')


# –†–û–£–¢–ï–† –ü–û –ö–û–ú–ê–ù–î–ï /profile
@router.message(Command('profile'), PrivateChatFilter())
async def profile(message: Message, session: AsyncSession) -> None:
    """
    Handles the "/profile" command to display user profile with subscription information.

    :param message: The Message object representing the user's message.
    :type message: aiogram.types.Message
    :param session: The AsyncSession object for asynchronous database operations.
    :type session: sqlalchemy.ext.asyncio.AsyncSession
    """
    user = await select_user(user_id=message.from_user.id, session=session)

    if user.subscription == "active":
        subscription_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è"
    else:
        subscription_text = "‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"  # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ "active"
    await message.answer(text='üìä <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n'
                              
                              f'üë§ <b>–ò–º—è:</b> {user.first_name} \n'
                              f'üñ• <b>ID:</b> <code>{user.user_id}</code>\n\n'
                              
                              f'üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_text}\n'
                              f'ü§ñ <b>–ú–æ–¥–µ–ª—å GPT:</b> {user.gpt_model} \n\n'
                              
                              '‚ùì <i>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</i> - <b>/help</b> \n\n'
                              '‚ùì <i>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</i> - <b>/faq</b>')


# –†–û–£–¢–ï–† –ö–ù–û–ü–ö–ò –ü–†–û–§–ò–õ–¨
@router.callback_query(F.data.startswith("userprofile"), PrivateChatFilter())
async def user_profile(call: CallbackQuery, session: AsyncSession) -> None:
    """
    Handles the User Profile button callback to display user profile with subscription information.

    :param call: The CallbackQuery object representing the callback.
    :type call: aiogram.types.CallbackQuery
    :param session: The AsyncSession object for asynchronous database operations.
    :type session: sqlalchemy.ext.asyncio.AsyncSession
    """
    await call.answer()
    user = await select_user(user_id=call.from_user.id, session=session)

    if user.subscription == "active":
        subscription_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è"
    else:
        subscription_text = "‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"  # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ "active"
    await call.message.edit_text(text='üìä <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n'
                                      
                                      f'üë§ <b>–ò–º—è:</b> {user.first_name}\n'
                                      f'üñ• <b>ID:</b> <code>{user.user_id}</code>\n\n'
                                      
                                      f'üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_text}\n'
                                      f'ü§ñ <b>–ú–æ–¥–µ–ª—å GPT:</b> {user.gpt_model}\n\n'
                                      
                                      '‚ùì <i>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</i> - <b>/help</b>\n\n'
                                      '‚ùì <i>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</i> - <b>/faq</b>', reply_markup=kb_back.as_markup())


# –†–û–£–¢–ï–† –ö–ù–û–ü–ö–ò –ù–ê–ó–ê–î
@router.callback_query(F.data.startswith("back"), PrivateChatFilter())
async def get_back(call: CallbackQuery) -> None:
    """
    Handles the Back button callback to return to the main menu.

    :param call: The CallbackQuery object representing the callback.
    :type call: aiogram.types.CallbackQuery
    """
    await call.answer()
    await call.message.edit_text(
        f'üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è @<b><a href="tg://user?id={call.from_user.id}">{call.from_user.first_name}</a></b>!\n\n'
        f'–Ø –±–æ—Ç ChatGPT ü§ñ, –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å GPT, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ —è –æ—Ç–≤–µ—á—É —Ç–µ–±–µ!',
        reply_markup=kb_user_main.as_markup())
